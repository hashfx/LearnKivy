CanvasApp6:  # main interface

### Canvas in Kivy

#:set s dp(150)  # defining variable: size as s
<CanvasApp>:
    canvas:
        Rectangle:  # default[ { coordinates: (0,0) }, { color: white }, { size: 100px, 100px, 100ox, 100px } ]
#            pos: dp(100), dp(200)  # coordinates of rectangle
#            pos: self.center  # center position the rectangle but center point is lower-left vertex
            pos: self.center_x-s/2, self.center_y-s/2  # center position the rectangle
            size: s, s  # size of rectangle :: defined earlier

        Ellipse:
            pos: 200, 500
            size: s, s/2  # width, height

        Line:
#            points:(0, 0, 100, 100)  # tuple of point coordinates (x, y, x2, y2...)
#            points: (0, 0, 100, 100, 200, 0, self.width, 100)  # other points can be added in continuation
            # creating 2 triangles with line
            points: (0, 0, self.width/4, 100, self.width/2, 0, self.width*3/4, 100, self.width, 0)
            width: 50  # thickness of line


# cross at center of screen
<CanvasApp2>:
    canvas:
        # horizontal line at center
        Line:
            points: (0, self.height/2, self.width, self.height/2)  # (x=0, y/2, len_of_line, y/2)
            width: 2
        # vertical line at center
        Line:
            # (middle_of_screen, y=0, middle_of_screen, top_of_screen)
            points: (self.width/2, 0, self.width/2, self.height)
            width: 2


<CanvasApp3>:
    canvas:
        Color:  # property applies to all the beneath properties
            rgb: 1, 0, 0  # red
        Line:
            circle: (200, 200, 100)  # center_x, center_y, radius
            width: 2
        Line:
            ellipse: (500, 300, 100, 200)  # center_x, center_y, radius_x, radius_y
            width: 2
        Color:
            rgba: 0, 0, 1, .3  # blue with 30% opacity
        Line:
            rectangle: (500, 100, 250, 150)  # x, y, width, height
            width: 2


<CanvasApp4>:
    Button:  # button to click and move filled rectangle
        pos: 100, 400
        text: "A"
        on_press: root.on_canvas_button_click()


<CanvasApp6>:
    RelativeLayout:
        canvas:
            Color:
                rgb: 1, 0.6, 0.2
            Rectangle:
                size: self.size
    RelativeLayout:
        canvas:
            Color:
                rgb: 1, 1, 1
            Rectangle:
                size: self.size
    RelativeLayout:
        canvas:
            Color:
                rgb: 0.07, 0.53, 0.03
            Rectangle:
                size: self.size



### Images in Kivy

<ImagesApp@GridLayout>:
    cols: 3
    Image:
        source: "images/cake.jpg"  # source of image file
    Image:
        source: "images/cake.jpg"  # source of image file
        allow_stretch: True
    Image:
        source: "images/cake.jpg"  # source of image file
        allow_stretch: True  # image takes all the space of the column
        keep_ratio: False  # aspect ratio of image :: default: True


### Widgets in Kivy

<WidgetsApp>:
    cols: 3

    # toggle button: have two states: ON and/or OFF
    ToggleButton:
        text: "OFF"
        on_state: root.on_toggle(self)  # when state of button is change, call function
        size_hint: None, 1  # size of toggle button
        width: "100dp"


    # clickable button: increases text value by 1 when clicked
    Button:
        text: "Click!"
        on_press: root.on_button_click()  # root: from class WidgetsApp Call method on_button_click() for Button on WidgetsApp
#        disabled: True  # disables a button :: button is not-clickable
#        disabled: False  # button is enabled by default
        disabled: not root.isEnabled  # if toggle is OFF; button is disabled
    Label:
        # text: "Hello, there!"
        text: root.my_text  # when my_text is modified, text in Label also changes
        font_name: "fonts/Lcd.ttf"  # custom font for text
        font_size: "80dp"  # size changed
        color: .1, .3, .8, 1  # color of text


    # switch state: ON and/or OFF
    Switch:
        id: my_switch
        on_active: root.on_switch_active(self)
        size_hint: None, 1  # size of switch
        width: "100dp"  # width of switch
        active: True  # by default, Switch would be in ON state


    # Slider: horizontal bar; selects value between minimum and maximum range
    Slider:
        id: my_slider
        min: 0  # minimum value of slider range
        max: 100  # maximum value of slider range
        value: 50  # seeks position of slider-circle at 50
#        on_value: root.on_slider_value(self)
        orientation: "vertical"  # vertical slider bar
        disabled: not my_switch.active  # synchronizes slider state to that of switch state

    BoxLayout:
        orientation: "vertical"
        Label:
    #        text: "Slider Value"  # displays label on slider
    #        text: "value"
            text: str(int(my_slider.value))  # displays value of slider equal to its range
        ProgressBar:
            max: 100  # minimum value is 0(fixed)
#            value: 25  # value of progress bar is at 25
            value: my_slider.value  # synchronizes value of slider to that of ProgressBar


    TextInput:
        id: text_input  # id to fetch text input
        size_hint: None, 1
        width: "100dp"
        text: "foo"  # default text
        multiline: False  # disables multi-line input :: default: True
        on_text_validate: root.on_text_validate(self)  # update label text only after pressing Enter Key
    Label:
#        text: text_input.text  # displays input text in label
        text: "Input Text: " + root.text_input_str  # displays entered text in label





### Layouts in Kivy

<PageLayoutApp@PageLayout>:
    MainWidget:
    BoxLayoutApp:
    AnchorLayoutApp:
    GridLayoutApp:


<ScrollViewApp@ScrollView>:
    # can accept only one child
    StackLayoutApp:
        # providing screen size credentials to ScrollView to decide how much to scroll
        size_hint: 1, None  # vertical:100%; horizontal:None
#        height: 4000  # 4000px
        height: self.minimum_height  # scrolls upto the actual height of the screen  :: responsive scroll



<StackLayoutApp>:
    # left-right ; top-bottom
    # default orientation: "lr-tb"
    orientation: "lr-tb"  # stacks button in right-to-left and top-to-bottom orientation
    padding: ("20dp", "20dp", "20dp", "20dp")
    spacing: "20dp", "20dp"  # horizontal, vertical


#<StackLayoutApp>:
#    # buttons would occupy 20% of the screen width i.e. 5 buttons in a row; remaining buttons would be stacked in 2nd row
#    Button:
#        text: "A"
#        size_hint: .2, .2
#    Button:
#        text: "B"
#        size_hint: .2, .2
#    Button:
#        text: "C"
#        size_hint: .2, .2


<GridLayoutApp@GridLayout>:
# two necessary components of such a method are: rows and columns
    cols: 3  # displays buttons in 3 columns
    Button:
        text: "A"
        size_hint: .5, 1  # changes button grid size from default to 50% width
    Button:
        text: "B"
    Button:
        text: "C"
    Button:
        text: "D"
        size_hint: .5, 1  # changes button grid size from default to 50% width
    Button:
        text: "E"
    Button:
        text: "F"



<AnchorLayoutApp>:
    # right, left, center(default)
    anchor_x: "center"
    # bottom, top, center(default)
    anchor_y: "top"
    BoxLayout:
        size_hint: .5, .5
        Button:
            text: "A"
        Button:
            text: "B"
        Button:
            text: "C"



<BoxLayoutApp>:
    orientation: "horizontal"  # vertical orientation
    Button:
        text: "A"
#        size_hint: 1, 1  # default size
#        size_hint: 1, .5  # (width, height) :: (80%, 50%)
        size_hint: .5, .5  # (width, height) :: (80%, 50%)
#        size: "80dp", "80dp"  # fixes size of button to 80dp (non-proportional)
#        size_hint: .5, None  # to make button non-proportional :: can have default values
        # pos_hint
        # horizontal: x, center_x, right
        # vertical: y, center_y, top
        pos_hint: {"center_y": .5}

# Stacking one BoxLayout in another BoxLayout

    BoxLayout:
        orientation: "vertical"
        spacing: "10dp"  # space between buttons
        Button:
            text: "B1"
        Button:
            text: "B2"
        Button:
            text: "B3"
        Button:
            text: "B4"


    Button:
        text: "C"
#        size_hint: 1, 2  # (width, height) :: (80%, 50%)



<MainWidget>:  # MainWidget function
    # Buttons in Kivy
    Button:  # creates a clickable button at (0,0)
        text: "Hello"  # displays text in button

#        size: 200, 100  # size of button (width, height)
#        pos: 50, 100  # changes the coordinates of button from default (0, 0) to specified one

        # display size and position as per different screen sizes in dp
        # (40dpx40dp) is standard size of a finger tap and is same in all devices
        size: "200dp", "100dp"  # size of button (width, height)
        pos: "50dp", "100dp"  # changes the coordinates of button from default (0, 0) to specified one
        color: 1, 1, 0, 1  # (r, g, b, a)

    # Labels in Kivy
    Label:  # creates a clickable button at (0,0)
        text: "Hello"  # displays text of label
#        size: "120dp", "100dp"  # size of label (width, height)
        width: "120dp"  # width of button
        height: "100dp"  # height of button

        pos: "100dp", "200dp"  # changes the coordinates of button from default (0, 0) to specified one
        color: 1, 0, 0, 1  # (r, g, b, a)



